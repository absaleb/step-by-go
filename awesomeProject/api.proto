syntax = "proto3";

package mashroom.verification;

import "google/protobuf/wrappers.proto";

option go_package = "gitlab.okta-solutions.com/mashroom/backend/verification";

enum FieldType {
    UNKNOWN_FIELD_TYPE = 0;
    RAW                = 1;
    ERROR              = 2;
    EMAIL              = 16;
    NAME               = 17;
    PASSWORD           = 18;
    COUNTRY            = 19;
    REGION             = 20;
    CITY               = 21;
    STREET             = 22;
    BUILDING           = 23;
    APARTMENT          = 24;
    ROOM               = 25;
    EXISTING_USER      = 26;
    EXISTING_PROPERTY  = 27;
    USER_LOGIN         = 28;
    FULL_ADDRESS       = 29;
}

enum Validity {
    UNKNOWN_VALIDITY = 0;
    VALID = 1;
    INVALID = 2;
}

message Component {
    string name = 1;
    PrimitiveDescription primitive = 2;
    StructDescription complex = 3;
}

message PrimitiveDescription {
    FieldType type = 1;
    google.protobuf.StringValue text = 2;
    google.protobuf.Int64Value integer = 3;
    google.protobuf.DoubleValue fraction = 4;
    google.protobuf.BytesValue binary = 5;
    google.protobuf.BoolValue boolean = 6;
}

message FieldDescription {
    string name = 1;
    PrimitiveDescription primitive = 2;
}

message VerifyFieldResult {
    Validity validity = 1;
    repeated Component components = 2;
    FieldDescription description = 3;
}

message StructDescription {
    string name = 1;
    repeated FieldDescription fields = 2;
}

message VerifyStructResult {
    Validity validity = 1;
    repeated Component components = 2;
    repeated VerifyFieldResult field_results = 3;
}

message VerifyPostcodeRequest{
    string postcode = 1;
}

message VerifyPostcodeQueryRequest{
    string queryLine = 1;
}

message VerifyPostcodeResult {
    string city = 1;
    repeated string addressLine = 2;
}

service VerificationService {
    rpc VerifyField(FieldDescription) returns (VerifyFieldResult);
    rpc VerifyStruct(StructDescription) returns (VerifyStructResult);
    rpc VerifyPostcode(VerifyPostcodeRequest) returns (VerifyPostcodeResult);
    rpc VerifyPostcodeQuery(VerifyPostcodeQueryRequest) returns (VerifyPostcodeResult);
}
